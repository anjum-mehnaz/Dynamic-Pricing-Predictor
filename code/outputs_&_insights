# Save the best model
saveRDS(xgb_best_model, file = "best_model.rds")

# Feature importance
importance_matrix <- xgb.importance(model = xgb_best_model)
print(importance_matrix)
xgb.plot.importance(importance_matrix, top_n = 10)


# Use data.table syntax directly
importance_matrix[order(-Frequency)][1:3]

# Additional insights
cat("\nâœ… Insight:\n")
cat("- 'Expected_Ride_Duration' dominates all three metrics (Gain, Cover, and Frequency).\n")
cat("- 'Vehicle_Type' contributes significantly after that, especially in cover and frequency.\n")
cat("- 'Location_Category' and 'Time_of_Booking' have minimal impact.\n")

# Prepare the importance matrix as a tibble
importance_df <- as_tibble(importance_matrix) %>%
  slice_max(Frequency, n = 10) %>%
  arrange(desc(Frequency)) %>%
  mutate(Percentage = Frequency / sum(Frequency) * 100)

# Recalculate ypos in *cumulative order* (top of pie = top row of data)
importance_df <- importance_df %>%
  arrange(Percentage) %>%
  mutate(ypos = cumsum(Percentage) - 0.5 * Percentage)

# Plot donut chart
ggplot(importance_df, aes(x = 2, y = Percentage, fill = Feature)) +
  geom_bar(stat = "identity", width = 1, color = "white") +
  coord_polar("y", start = 0) +
  geom_text(aes(y = ypos, label = paste0(round(Percentage, 1), "%")),
            color = "white", size = 5) +
  theme_void() +
  xlim(0.5, 2.5) +
  ggtitle("Top 10 Feature Importances (Donut Chart)") +
  theme(legend.position = "right")

# Plotting Feature importance pie chart
library(scales)

# Prepare the data
importance_df <- as_tibble(importance_matrix) %>%
  slice_max(Frequency, n = 10) %>%
  arrange(desc(Frequency)) %>%
  mutate(
    Feature = factor(Feature, levels = Feature),  # enforce ordering for color mapping
    Percentage = Frequency / sum(Frequency) * 100,
    Label = paste0(Feature, ": ", round(Percentage, 1), "%")
  )

# Plot with correctly mapped legend colors
ggplot(importance_df, aes(x = "", y = Percentage, fill = Feature)) +
  geom_bar(stat = "identity", width = 1, color = "white") +
  coord_polar("y", start = 0) +
  scale_fill_brewer(palette = "Paired", labels = importance_df$Label) +
  theme_void() +
  labs(title = "Top 10 Feature Importances (Pie Chart)", fill = "Feature\n(Percentage)") +
  theme(
    plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
    legend.position = "right",
    legend.title = element_text(size = 18, face = "bold"),
    legend.text = element_text(size = 20)
  )

# Plotting Actual vs Predicted GGPLOT
# Actual vs Predicted Plot for XGBoost
library(ggplot2)

# Create a dataframe for plotting
comparison_df <- data.frame(
  Actual = test_data$Historical_Cost_of_Ride,
  Predicted = xgb_preds
)

# Poster-quality Actual vs Predicted Plot
ggplot(comparison_df, aes(x = Actual, y = Predicted)) +
  geom_point(color = "dodgerblue", alpha = 0.7, size = 2.5) +
  geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "darkred", size = 1) +
  labs(title = "Actual vs Predicted Ride Costs (XGBoost)",
       x = "Actual Ride Cost",
       y = "Predicted Ride Cost") +
  theme_minimal(base_size = 16) +
  theme(
    plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
    axis.title.x = element_text(size = 18, face = "bold"),
    axis.title.y = element_text(size = 18, face = "bold"),
    axis.text.x = element_text(size = 16),
    axis.text.y = element_text(size = 16),
    axis.line = element_line(size = 1.2, colour = "black"),
    panel.grid.major = element_line(color = "gray90"),
    panel.grid.minor = element_blank()
  ) +
  coord_equal()


# Cross-Validation MAE Distribution

ggplot(cv_results, aes(x = factor(1), y = MAE)) +
  geom_boxplot(fill = "skyblue") +
  labs(
    title = "Cross-Validation MAE Distribution",
    x = "Model",
    y = "MAE"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 18, face = "bold"),
    axis.title = element_text(size = 16),
    axis.text = element_text(size = 14)
  )
